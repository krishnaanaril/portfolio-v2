{"pageProps":{"id":"angular-19-new-diagnostic","meta":{"title":"Angular 19 | Diagnostic for unused standalone imports","description":"Angular v19 introduces a new diagnostic tool that reports cases where a declaration is present in the imports array but isn't being used anywhere in the application.","published":true,"publishedAt":"2024-09-27T00:00:00.000Z","updatedAt":"2024-09-27T00:00:00.000Z","category":"tech","image":"banners/75","keywords":["feature","angular"],"authors":["Krishna Mohan A M"]},"content":"<p>This <a href=\"https://github.com/angular/angular/pull/57605\">feature</a>, which was <a href=\"https://github.com/angular/angular/issues/46766\">long pending</a>, addresses a common issue in Angular applications. As standalone components become the standard, it's possible for some components to remain unused in templates even though they are imported by a parent component. This can lead to increased compile times and larger bundle sizes, which are detrimental to application performance.</p>\n<h2>How Angular v19 Tackles the Issue</h2>\n<p>Angular v19 introduces a new diagnostic tool that reports cases where a declaration is present in the imports array but isn't being used anywhere in the application. By default, this diagnostic is reported as a warning, allowing developers to identify and remove unnecessary imports without interrupting the compilation process.</p>\n<h2>Configuration in <code>tsconfig</code></h2>\n<p>To control this new diagnostic feature, developers can use the following configuration in their tsconfig.json file:</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"angularCompilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"extendedDiagnostics\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"checks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"unusedStandaloneImports\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"suppress\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Understanding the unusedStandaloneImports Option</h2>\n<p>The unusedStandaloneImports option accepts three values, each dictating how the diagnostic should be treated:</p>\n<ul>\n<li><code>warning</code>: This is the default setting. The diagnostic is treated as a warning, which means it will not fail the compilation process. It serves as a gentle reminder to clean up any unused imports.\r\n<img src=\"/images/ang19_01.PNG\" alt=\"\"></li>\n<li><code>error</code>: When set to error, the diagnostic is treated as a hard error. This will cause the compilation to fail, enforcing a stricter code quality standard.\r\n<img src=\"/images/ang19_03.PNG\" alt=\"\"></li>\n<li><code>suppress</code>: If you choose to suppress the diagnostic, it will be ignored altogether. This might be useful in scenarios where you are aware of the unused imports and have a specific reason to keep them.\r\n<img src=\"/images/ang19_02.PNG\" alt=\"\"></li>\n</ul>\n"},"__N_SSG":true}