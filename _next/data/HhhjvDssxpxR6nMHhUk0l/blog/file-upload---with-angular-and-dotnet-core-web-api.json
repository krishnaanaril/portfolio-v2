{"pageProps":{"id":"file-upload---with-angular-and-dotnet-core-web-api","meta":{"title":"File Upload - With Angular and Dotnet Core Web API","description":"Minimal implementation of file upload using Angular and dotnet core web API.","published":true,"publishedAt":"2020-09-02T00:00:00.000Z","updatedAt":"2020-09-02T00:00:00.000Z","category":"tech","image":"banners/03","keywords":["angular","dotnet","API"],"authors":["Krishna Mohan A M"]},"content":"<p>In this blog post we'll have a minimal implementation of file upload using <a href=\"https://angular.io\">Angular</a> and dotnet core web API. No other fancy stuffs. To completely understand the gist,some familiarity with Angular and dotnet core is required.</p>\n<h2>Contents</h2>\n<ol>\n<li><a href=\"\">Prerequisite</a></li>\n<li><a href=\"\">Creating Web API</a></li>\n<li><a href=\"\">Creating Angular Frontend</a></li>\n<li><a href=\"\">What's next</a></li>\n</ol>\n<h2>Prerequisites</h2>\n<ul>\n<li>Install <a href=\"https://angular.io/cli#installing-angular-cli\">Angular CLI</a></li>\n<li>Install <a href=\"https://dotnet.microsoft.com/download/dotnet-core/3.1\">Dotnet Core</a>. For this post I'll be using dotnet core version 3.1.</li>\n</ul>\n<h2>Creating Web API</h2>\n<p>First we need to create a <a href=\"https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-3.1&#x26;tabs=visual-studio-code#create-a-web-project\">dotnet core web api project</a> and then add <code>FileUploadController</code> <a href=\"https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-3.1&#x26;tabs=visual-studio-code#create-a-web-project\">Controller class</a></p>\n<h3>Add Serilog for logging (Optional)</h3>\n<p>For logging I'll be using <a href=\"https://serilog.net/\">Serilog</a> and a flat file sink. To configure this we need to install the following dependencies via Nuget.</p>\n<ul>\n<li>Serilog</li>\n<li>Serilog.AspNetCore</li>\n<li>Serilog.Sinks.file</li>\n</ul>\n<p>Then update the <code>Program.cs</code> file.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Log<span class=\"token punctuation\">.</span>Logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LoggerConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span>Enrich<span class=\"token punctuation\">.</span><span class=\"token function\">FromLogContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span>WriteTo<span class=\"token punctuation\">.</span><span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logs/log-.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">rollingInterval</span><span class=\"token punctuation\">:</span> RollingInterval<span class=\"token punctuation\">.</span>Day<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">CreateLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n                Log<span class=\"token punctuation\">.</span><span class=\"token function\">Information</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app starting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">CreateHostBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Log<span class=\"token punctuation\">.</span><span class=\"token function\">Information</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app terminated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                Log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app crashed\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">finally</span>\n            <span class=\"token punctuation\">{</span>\n                Log<span class=\"token punctuation\">.</span><span class=\"token function\">CloseAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IHostBuilder</span> <span class=\"token function\">CreateHostBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            Host<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDefaultBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureWebHostDefaults</span><span class=\"token punctuation\">(</span>webBuilder <span class=\"token operator\">=></span>\n                <span class=\"token punctuation\">{</span>\n                    webBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseStartup</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&#x3C;</span>Startup<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">UseSerilog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>In <code>FileUploadController.cs</code> file add the parameter <code>ILogger&#x3C;FileUploadController> logger</code> to the constructor.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&#x3C;</span>FileUploadController<span class=\"token punctuation\">></span></span> _logger<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">FileUploadController</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILogger<span class=\"token punctuation\">&#x3C;</span>FileUploadController<span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Get upload path from configuration (Optional)</h3>\n<p>If you need to have file upload path configurable, you can add the path as key-value pair in <code>appsettings.json</code> file. e.g:</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"FileUploadPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:\\\\KrishnaMohan\\\\Builds\\\\uploads\"</span>\n</code></pre></div>\n<p>And update <code>FileUploadController.cs</code> constructor to add the configuration parameter.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IConfiguration</span> _configuration<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&#x3C;</span>FileUploadController<span class=\"token punctuation\">></span></span> _logger<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">FileUploadController</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IConfiguration</span> configuration<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&#x3C;</span>FileUploadController<span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _configuration <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">;</span>\n        _logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Add methods</h3>\n<p>Let's add two methods to handle single file upload and multiple file upload. Argument for methods will be of type <a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.iformfile?view=aspnetcore-3.1\">IFormFile</a> which represent the file send with HttpRequest.</p>\n<ul>\n<li>POST Method for Single File Upload</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Route</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"single-file\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HttpPost</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&#x3C;</span>IActionResult<span class=\"token punctuation\">></span></span> <span class=\"token function\">PostSingleFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IFormFile</span> formFile<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>            \n        <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> size <span class=\"token operator\">=</span> formFile<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>        \n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Got </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token number\">1</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> files\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>formFile<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> filePath <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>_configuration<span class=\"token punctuation\">[</span><span class=\"token string\">\"FileUploadPath\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> formFile<span class=\"token punctuation\">.</span>FileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"File Name: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">formFile<span class=\"token punctuation\">.</span>FileName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">. File Path: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">filePath</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">await</span> formFile<span class=\"token punctuation\">.</span><span class=\"token function\">CopyToAsync</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"All files saved successfully\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> size <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>POST Method for Multiple File Upload</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Route</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"multiple-files\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HttpPost</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&#x3C;</span>IActionResult<span class=\"token punctuation\">></span></span> <span class=\"token function\">PostMultipleFiles</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List<span class=\"token punctuation\">&#x3C;</span>IFormFile<span class=\"token punctuation\">></span></span> files<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> size <span class=\"token operator\">=</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Got </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">files<span class=\"token punctuation\">.</span>Count</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> files\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> formFile <span class=\"token keyword\">in</span> files<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>formFile<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> filePath <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>_configuration<span class=\"token punctuation\">[</span><span class=\"token string\">\"FileUploadPath\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> formFile<span class=\"token punctuation\">.</span>FileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"File Name: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">formFile<span class=\"token punctuation\">.</span>FileName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">. File Path: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">filePath</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">await</span> formFile<span class=\"token punctuation\">.</span><span class=\"token function\">CopyToAsync</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"All files saved successfully\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> count <span class=\"token operator\">=</span> files<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">,</span> size <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>And that's it. We are done with the API part.</p>\n<h2>Creating Angular Frontend</h2>\n<p>Using Angular CLI create a <a href=\"https://angular.io/cli/new\">new project</a> and add <code>file-upload</code> <a href=\"https://angular.io/cli/generate#component\">component</a> and <a href=\"https://angular.io/cli/generate#service\">service</a>. The logic for getting the user selected files resides in the component and the logic for sending post request resides in the service.</p>\n<ul>\n<li>Update <code>file-upload.service.ts</code> to add our methods to make the http request. Make sure that you import <a href=\"https://angular.io/api/common/http/HttpClientModule\">HttpClientModule</a> in your module file. Here we'll be using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">FormData</a> to send the file along with the request.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> httpClient<span class=\"token operator\">:</span> HttpClient<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">postFile</span><span class=\"token punctuation\">(</span>filesToUpload<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Observable<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> endpoint <span class=\"token operator\">=</span> <span class=\"token string\">'https://localhost:44352/api/fileupload/single-file'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> formData<span class=\"token operator\">:</span> FormData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n        formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formFile'</span><span class=\"token punctuation\">,</span> filesToUpload<span class=\"token punctuation\">,</span> filesToUpload<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpClient\n        <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">,</span> formData<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">postMultipleFiles</span><span class=\"token punctuation\">(</span>filesToUpload<span class=\"token operator\">:</span> FileList<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Observable<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> endpoint <span class=\"token operator\">=</span> <span class=\"token string\">'https://localhost:44352/api/fileupload/multiple-files'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> formData<span class=\"token operator\">:</span> FormData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>filesToUpload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>file <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'files'</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpClient\n        <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">,</span> formData<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>Add the following methods in <code>file-upload.component.ts</code> and update the constructor to add the service.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileUploadComponent</span> <span class=\"token punctuation\">{</span>\n        filesToUpload<span class=\"token operator\">:</span> FileList<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> fileUploadService<span class=\"token operator\">:</span> FileUploadService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">filesChange</span><span class=\"token punctuation\">(</span>$event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filesToUpload <span class=\"token operator\">=</span> $event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">uploadFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filesToUpload<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileUploadService<span class=\"token punctuation\">.</span><span class=\"token function\">postMultipleFiles</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filesToUpload<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileUploadService<span class=\"token punctuation\">.</span><span class=\"token function\">postFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filesToUpload<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>Update <code>file-upload.component.html</code> to add the html inputs. Ideally we should use a form, but for simplicity I'm using button click event to trigger the upload. Also I've mentioned <code>image/*</code> in the accept attribute to only allow image file types but this is optional.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Choose File<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">multiple</span> <span class=\"token attr-name\">(change)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>filesChange($event)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>uploadFiles()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{'Upload' | uppercase}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<h2>Testing</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/visualstudio/get-started/csharp/tutorial-aspnet-core-ef-step-02?view=vs-2019#run-the-application\">Start the Web API</a> and Angular project (use <code>npm start</code>).</li>\n<li>Navigate to <code>http:/localhost:4200</code></li>\n<li>Select the files and click on <code>Update</code>.</li>\n<li>Verify the files are uploaded to the configured folder.</li>\n</ul>\n<h2>What's next</h2>\n<p>This a bare minimum code snippet which is not ideal for production envrionment. We can extend this with reactive forms and update the file to AWS S3 buckets. Well that is up for you.</p>\n"},"__N_SSG":true}