{"pageProps":{"id":"how-to-implement-cqrs-with-mediat-r---part-2","meta":{"title":"How to implement CQRS with MediatR - Part 2","description":"This post is about implementing mediator pattern in a dotnet WebAPI using MediatR library.","published":true,"publishedAt":"2021-02-27T00:00:00.000Z","updatedAt":"2021-02-27T00:00:00.000Z","category":"tech","image":"banners/17","keywords":["dotnet","mediatr","CancellationToken"],"authors":["Krishna Mohan A M"]},"content":"<p>In this post we'll be using MediatR with a dotnet WebAPI. If you want to read about its implementation in a console application, check out my other blog <a href=\"https://krishnamohan.dev/blog/how-to-implement-cqrs-with-mediat-r---part-1\">post</a>.</p>\n<p>For basic cases you can implement the message types and handlers mentioned in the Part 1. Here we are trying a different use case. The use of <code>CancellationToken</code> in <code>MediatR</code> to drop the ongoing request processing. This is very helpful if the request processing is blocked and we want to implement a timeout or if the request is dropped by the initiator.</p>\n<p>For the sample case we will create a web api that try to do a task within 5 seconds. The API method will accept time in milliseconds and if the given time is greater than 5 seconds the task will run for 5 seconds and then get cancelled, otherwise task will be executed for the given time.</p>\n<h2>Prerequisites</h2>\n<ul>\n<li>Install <a href=\"https://dotnet.microsoft.com/download\">dotnet core</a></li>\n<li>Install Visual Studio Code/Visual Studio IDE</li>\n</ul>\n<h2>Creating a dotnet WebAPI application</h2>\n<p>Run the following CLI command to create a WebAPI project.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet new webapi MediatRSampleAPI\n</code></pre></div>\n<h2>Configure Serilog for logging (Optional)</h2>\n<p>I'll be using <a href=\"https://serilog.net/\">Serilog</a> and a flat file sink for logging. To configure this we need to install the following dependencies via Nuget.</p>\n<ul>\n<li>Microsoft.Extensions.Logging</li>\n<li>Serilog</li>\n<li>Serilog.AspNetCore</li>\n<li>Serilog.Sinks.File</li>\n</ul>\n<p>Then update the <code>Program.cs</code> file.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Log<span class=\"token punctuation\">.</span>Logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LoggerConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span>Enrich<span class=\"token punctuation\">.</span><span class=\"token function\">FromLogContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span>WriteTo<span class=\"token punctuation\">.</span><span class=\"token function\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logs/MediatRSample.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">rollingInterval</span><span class=\"token punctuation\">:</span> RollingInterval<span class=\"token punctuation\">.</span>Day<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">CreateLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">Information</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting up\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">CreateHostBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Application start-up failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">finally</span>\n    <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">CloseAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IHostBuilder</span> <span class=\"token function\">CreateHostBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    Host<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDefaultBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">UseSerilog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureWebHostDefaults</span><span class=\"token punctuation\">(</span>webBuilder <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            webBuilder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UseStartup</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&#x3C;</span>Startup<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>Install and Configure MediatR</h2>\n<p>Next we need to install MediatR (version 9.0.0 at the time of writing) via Nuget. To configure MediatR, add the following snippet to the <code>ConfigureServices()</code> method in <code>Startup.cs</code> file.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services<span class=\"token punctuation\">.</span><span class=\"token function\">AddMediatR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Startup</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>Create a Notification message and its handler</h2>\n<p>Our notification message carries time in milliseconds. Handler just accepts the time given by the user and waits for that much time. In the meantime if the request is cancelled, waiting will be stopped and exit.</p>\n<p>I've added <code>Stopwatch</code> code to make sure that handler will wait for maximum 5 seconds. When cancellation is triggered and <code>OperationCanceledException</code> is thrown we need to catch it explicitly.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DelayNotificationMessage</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">INotification</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> TimeInMilliSeconds <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Notifier03</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">INotificationHandler<span class=\"token punctuation\">&#x3C;</span>DelayNotificationMessage<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&#x3C;</span>Notifier03<span class=\"token punctuation\">></span></span> _logger<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Notifier03</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILogger<span class=\"token punctuation\">&#x3C;</span>Notifier03<span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DelayNotificationMessage</span> notification<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Notifier 03 -> Time In MIlli Seconds: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">notification<span class=\"token punctuation\">.</span>TimeInMilliSeconds</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stopwatch</span> stopwatch <span class=\"token operator\">=</span> Stopwatch<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span>notification<span class=\"token punctuation\">.</span>TimeInMilliSeconds<span class=\"token punctuation\">,</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OperationCanceledException</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 seconds passed and the task is cancelled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogError</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                \n        <span class=\"token punctuation\">}</span>\n        stopwatch<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Elapsed Time: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">stopwatch<span class=\"token punctuation\">.</span>ElapsedMilliseconds</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Create a mediator service</h2>\n<p>Mediator Service is a class that is used by the initiator to publish messages to the handlers. Here we'll the add the following code in the service class where <code>CancellationToken</code> is an optional parameter.</p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DelayedNotify</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> timeInMilliSeconds<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    _mediator<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DelayNotificationMessage</span> <span class=\"token punctuation\">{</span> TimeInMilliSeconds <span class=\"token operator\">=</span> timeInMilliSeconds <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> cancellationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n</code></pre></div>\n<h2>Add new method in API Controller</h2>\n<p>Now let's add a controller method that creates a cancellation token. CancellationToken is set to cancel after 5 seconds using the <code>CancelAfter</code> <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource?view=net-5.0#methods\">method</a> of <code>CancellationTokenSource</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HttpGet</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dowithin5seconds\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&#x3C;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">DoWithin5Seconds</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> timeInMilliSeconds<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">CancellationTokenSource</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">CancellationToken</span> token <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">;</span>\n    source<span class=\"token punctuation\">.</span><span class=\"token function\">CancelAfter</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _mediatorService<span class=\"token punctuation\">.</span><span class=\"token function\">DelayedNotify</span><span class=\"token punctuation\">(</span>timeInMilliSeconds<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"Finished within 5 seconds.\"</span><span class=\"token punctuation\">;</span>\n\n    _logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Run the application</h2>\n<p>To run the project via dotnet cli, run the following command.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet run <span class=\"token parameter variable\">--project</span> <span class=\"token operator\">&#x3C;</span>Path to *.csproj file<span class=\"token operator\">></span>\n</code></pre></div>\n<p>Once the port is open, invoke the <code>DoWithin5Seconds</code> method by entering 'http://localhost:62705/dowithin5seconds?timeInMilliSeconds=15000' in the browser (Your port number may vary. Also for the demo purpose it is better to disable https redirection).</p>\n<p>You'll get the response immediately, but the process will run for a maximum of 5 seconds. If you check the log file, you can see that the execution stopped at 5 seconds.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">2021</span>-02-27 <span class=\"token number\">12</span>:46:57.384 +05:30 <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> Executing endpoint <span class=\"token string\">'MediatRSampleAPI.Controllers.SlowTestController.DoWithin5Seconds (MediatRSampleAPI)'</span>\n<span class=\"token number\">2021</span>-02-27 <span class=\"token number\">12</span>:46:57.425 +05:30 <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> Route matched with <span class=\"token punctuation\">{</span>action <span class=\"token operator\">=</span> <span class=\"token string\">\"DoWithin5Seconds\"</span>, controller <span class=\"token operator\">=</span> <span class=\"token string\">\"SlowTest\"</span><span class=\"token punctuation\">}</span>. Executing controller action with signature System.Threading.Tasks.Task`1<span class=\"token punctuation\">[</span>System.String<span class=\"token punctuation\">]</span> DoWithin5Seconds<span class=\"token punctuation\">(</span>Int32<span class=\"token punctuation\">)</span> on controller MediatRSampleAPI.Controllers.SlowTestController <span class=\"token punctuation\">(</span>MediatRSampleAPI<span class=\"token punctuation\">)</span>.\n<span class=\"token number\">2021</span>-02-27 <span class=\"token number\">12</span>:46:57.517 +05:30 <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> Executing action method MediatRSampleAPI.Controllers.SlowTestController.DoWithin5Seconds <span class=\"token punctuation\">(</span>MediatRSampleAPI<span class=\"token punctuation\">)</span> - Validation state: <span class=\"token string\">\"Valid\"</span>\n<span class=\"token number\">2021</span>-02-27 <span class=\"token number\">12</span>:46:57.524 +05:30 <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> Notifier 03 -<span class=\"token operator\">></span> Time In MIlli Seconds: <span class=\"token number\">15000</span>\n<span class=\"token number\">2021</span>-02-27 <span class=\"token number\">12</span>:46:57.526 +05:30 <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> Finished within <span class=\"token number\">5</span> seconds.\n<span class=\"token number\">2021</span>-02-27 <span class=\"token number\">12</span>:47:02.576 +05:30 <span class=\"token punctuation\">[</span>ERR<span class=\"token punctuation\">]</span> <span class=\"token number\">5</span> seconds passed and the task is cancelled\n<span class=\"token number\">2021</span>-02-27 <span class=\"token number\">12</span>:47:02.577 +05:30 <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> Elapsed Time: <span class=\"token number\">5052</span>\n</code></pre></div>\n<p>Full source code is available in <a href=\"https://github.com/krishnaanaril/try-outs/tree/master/MediatRSample/MediatRSampleAPI\">GitHub</a>.</p>\n<h2>Final Thoughts</h2>\n<p>If you are more interested in the use of <code>CancellationToken</code>, please checkout the <a href=\"https://andrewlock.net/using-cancellationtokens-in-asp-net-core-mvc-controllers/\">post</a> by Andrew Lock.</p>\n<p>One thing I haven't explored so far is exception handling with MediatR. It requires a blog post of its own and I'll be posting it soon.</p>\n"},"__N_SSG":true}