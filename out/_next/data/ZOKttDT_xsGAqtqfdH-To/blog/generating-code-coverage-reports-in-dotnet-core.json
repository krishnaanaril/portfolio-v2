{"pageProps":{"id":"generating-code-coverage-reports-in-dotnet-core","meta":{"title":"Generating Code Coverage Reports in Dotnet Core","description":"Unlike other application frameworks .NET Core do not provide code coverage reports out of the box. Here I’ll be using a different approach which actually suited my web application. Without further ado, let’s get started.","published":true,"publishedAt":"2019-07-05T00:00:00.000Z","updatedAt":"2019-07-05T00:00:00.000Z","category":"tech","image":"banners/04","keywords":["dotnet"],"authors":["Krishna Mohan A M"]},"content":"<p>Unlike other application frameworks <strong>.NET Core</strong> do not provide code coverage reports out of the box, even the code coverage <a href=\"https://github.com/microsoft/vstest/issues/981\">support </a>was provided only in dotnet core version 2.1. But the ‘<strong>Code Coverage Analysis</strong>’ is provided with Visual Studio Enterprise edition. You can find more information <a href=\"https://docs.microsoft.com/en-us/visualstudio/test/using-code-coverage-to-determine-how-much-code-is-being-tested?view=vs-2017\">here</a>.</p>\n<p>That’s okay, we’ve other tools available to get the code coverage reports and here I’ll be briefly explaining about it. There is already a blog post about this <a href=\"https://gunnarpeipman.com/aspnet/code-coverage/\">topic</a> by <a href=\"https://twitter.com/gpeipman\">Gunnar Peipman</a>. You can refer that as well. Here I’ll be using a different approach which actually suited my web application. Without further ado, let’s get started.</p>\n<h2>Contents</h2>\n<ul>\n<li>Prerequisites</li>\n<li>Creating dotnet application and adding test project</li>\n<li>Running tests with CLI</li>\n<li>Convert *.coverage file to *.coveragexml file</li>\n<li>Generate Reports using ReportGenerator</li>\n<li>Powershell script with all the steps</li>\n<li>Conclusion</li>\n</ul>\n<h2>Prerequisites</h2>\n<p>You need to install/Configure:</p>\n<ul>\n<li>Dotnet core version 2.1 or above.</li>\n<li>Visual Studio 2017 or above / Visual studio code.</li>\n<li><a href=\"https://github.com/danielpalme\">Daniel Palme</a>’s <a href=\"https://danielpalme.github.io/ReportGenerator/usage.html\">ReportGenerator</a></li>\n<li><a href=\"https://www.nuget.org/packages/Microsoft.CodeCoverage/\">Microsoft.CodeCoverage</a></li>\n</ul>\n<h2>Creating dotnet application and adding test project</h2>\n<p>You can make use of <em>dotnet new</em> command or Visual Studio templates for creating a new project and test project. Here I’ll be covering MSTest, you can try with another unit testing framework as well.</p>\n<p>If you’ve a dotnet core application with version 1.x, you can do the following steps to get the code coverage.</p>\n<p>• Upgraded test related nuget refernces to latest version</p>\n<div class=\"remark-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\">&#x3C;PackageReference Include=”Microsoft.NET.Test.Sdk” Version=”15.9.0\" />\n&#x3C;PackageReference Include=”MSTest.TestAdapter” Version=”1.3.2\" />\n &#x3C;PackageReference Include=”MSTest.TestFramework” Version=”1.3.2\" />\n</code></pre></div>\n<p>• Add the following config in *.csproj files. More information is available <a href=\"https://github.com/Microsoft/vstest/issues/800\">here.</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>DebugType</span><span class=\"token punctuation\">></span></span>Full<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>DebugType</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<h2>Running tests with CLI</h2>\n<p>Once we’ve created our application and added sufficient unit tests. We need to run these tests and get the code coverage info. You do so by running the following command.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token builtin class-name\">test</span> <span class=\"token operator\">&#x3C;</span>Path to *.csproj file<span class=\"token operator\">></span> --results-directory:<span class=\"token operator\">&#x3C;</span>Test Result directory<span class=\"token operator\">></span> --collect:<span class=\"token string\">\"Code Coverage\"</span>\n</code></pre></div>\n<p>But I had a problem, dotnet was analyzing my dependent libraries as well. I was using <a href=\"https://github.com/moq/moq\">Moq </a>for mocking and <a href=\"https://github.com/MisterJames/GenFu\">GenFu</a> to generate random test data. So I had to exclude these dlls during the code coverage analysis by creating a <a href=\"https://docs.microsoft.com/en-us/visualstudio/test/configure-unit-tests-by-using-a-dot-runsettings-file?view=vs-2019\">runsettings</a> file and add the following configuration:</p>\n<div class=\"remark-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>ModulePaths</span><span class=\"token punctuation\">></span></span>              \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>Exclude</span><span class=\"token punctuation\">></span></span>                \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>ModulePath</span><span class=\"token punctuation\">></span></span>.*Moq.dll<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>ModulePath</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>ModulePath</span><span class=\"token punctuation\">></span></span>.*GenFu.dll<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>ModulePath</span><span class=\"token punctuation\">></span></span>                \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>Exclude</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>ModulePaths</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>Include and exclude nodes use regular expressions. More information is available <a href=\"https://docs.microsoft.com/en-us/visualstudio/test/customizing-code-coverage-analysis?view=vs-2019#regular-expressions\">here</a>.</p>\n<p>Now we need to run *test *command using this .runsettings file.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token builtin class-name\">test</span> <span class=\"token operator\">&#x3C;</span>Path to .csproj file<span class=\"token operator\">></span> --settings:<span class=\"token operator\">&#x3C;</span>Path to .runsettings file<span class=\"token operator\">></span>\n</code></pre></div>\n<p>This will generate *.coverage file inside a folder whose name corresponds to a GUID. Right now dotnet core CLI <a href=\"https://github.com/microsoft/vstest/issues/1957#issue-420578504\">do not support</a> custom name for *.coverage file.</p>\n<h2>Convert *.coverage file to *.coveragexml file</h2>\n<p>*CodeCoverage.exe *is a tool that comes with the installation of Visual Studio. To generate a coverage report with ReportGenerator the file has to be converted to xml format.</p>\n<p>To get the xml file you can use the following command:</p>\n<div class=\"remark-highlight\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>UserProfile</span><span class=\"token punctuation\">></span></span>\\.nuget\\packages\\microsoft.codecoverage\\<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>version</span><span class=\"token punctuation\">></span></span>\\build\\netstandard1.0\\CodeCoverage\\CodeCoverage.exe analyze  /output:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>xml</span> <span class=\"token attr-name\">file</span> <span class=\"token attr-name\">name</span> <span class=\"token attr-name\">with</span> <span class=\"token attr-name\">Path</span><span class=\"token punctuation\">></span></span>.coveragexml  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>path</span> <span class=\"token attr-name\">to</span> <span class=\"token attr-name\">coverage</span> <span class=\"token attr-name\">file</span><span class=\"token punctuation\">></span></span>\n\n# Eg: C:\\Users\\krishnamohan\\.nuget\\packages\\microsoft.codecoverage\\15.9.0\\build\\netstandard1.0\\CodeCoverage\\CodeCoverage.exe analyze  /output:d:\\MyTestOutput.coveragexml  d:\\SomeName.coverage\n</code></pre></div>\n<h2>Generate Reports using ReportGenerator</h2>\n<p>We need to run another command using the installed ReportGenerator.dll.</p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\">dotnet <span class=\"token operator\">&#x3C;</span>UserProfile<span class=\"token operator\">></span><span class=\"token punctuation\">\\</span>.nuget<span class=\"token punctuation\">\\</span>packages<span class=\"token punctuation\">\\</span>reportgenerator<span class=\"token punctuation\">\\</span><span class=\"token operator\">&#x3C;</span>version<span class=\"token operator\">></span><span class=\"token punctuation\">\\</span>tools<span class=\"token punctuation\">\\</span>netcoreapp2.1<span class=\"token punctuation\">\\</span>ReportGenerator.dll <span class=\"token string\">\"-reports:&#x3C;Coveragexml file path>\"</span> <span class=\"token string\">\"-targetdir:&#x3C;path to coverage report>\"</span>\n<span class=\"token operator\">&#x3C;</span><span class=\"token comment\">#</span>\nEg: dotnet C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>krishnamohan<span class=\"token punctuation\">\\</span>.nuget<span class=\"token punctuation\">\\</span>packages<span class=\"token punctuation\">\\</span>reportgenerator<span class=\"token punctuation\">\\</span><span class=\"token number\">4.1</span>.10<span class=\"token punctuation\">\\</span>tools<span class=\"token punctuation\">\\</span>netcoreapp2.1<span class=\"token punctuation\">\\</span>ReportGenerator.dll <span class=\"token string\">\"-reports:d:\\MyTestOutput.coveragexml\"</span> <span class=\"token string\">\"-targetdir:d:<span title=\"\\c\" class=\"token entity\">\\c</span>overagereport\"</span>\n<span class=\"token comment\">#></span>\n</code></pre></div>\n<p>This will generate reports in *.htm format in the given output folder. If you open the index.htm file you can view the report.</p>\n<p><img src=\"/images/03_01.png\" alt=\"Sample Report Image\"><em>Sample Report Image. Source: https://github.com/danielpalme/ReportGenerator</em></p>\n<h2>Powershell script with all the steps</h2>\n<div class=\"remark-highlight\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">param</span><span class=\"token punctuation\">(</span>\n   <span class=\"token namespace\">[Parameter(Mandatory=$true)]</span>\n   <span class=\"token namespace\">[string]</span><span class=\"token variable\">$testProjectPath</span><span class=\"token punctuation\">,</span>\n   <span class=\"token namespace\">[Parameter(Mandatory=$true)]</span>\n   <span class=\"token namespace\">[string]</span><span class=\"token variable\">$testSettingsPath</span><span class=\"token punctuation\">,</span>\n   <span class=\"token namespace\">[Parameter(Mandatory=$true)]</span>\n   <span class=\"token namespace\">[string]</span><span class=\"token variable\">$testResultsFolder</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">&#x3C;#</span>\n<span class=\"token comment\">echo \"Test Project Path\" $testProjectPath</span>\n<span class=\"token comment\">echo \"Test Settings Path\" $testSettingsPath</span>\n<span class=\"token comment\">echo \"Test Results Folder\" $testResultsFolder</span>\n<span class=\"token comment\">#></span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-not</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Test-Path</span> <span class=\"token variable\">$testProjectPath</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n   <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">throw</span> <span class=\"token namespace\">[System.IO.FileNotFoundException]</span> <span class=\"token string\">\"<span class=\"token variable\">$testProjectPath</span> not found.\"</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-not</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Test-Path</span> <span class=\"token variable\">$testSettingsPath</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n   <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">throw</span> <span class=\"token namespace\">[System.IO.FileNotFoundException]</span> <span class=\"token string\">\"<span class=\"token variable\">$testSettingsPath</span> not found.\"</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-not</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Test-Path</span> <span class=\"token variable\">$testResultsFolder</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n   <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">throw</span> <span class=\"token namespace\">[System.IO.FileNotFoundException]</span> <span class=\"token string\">\"<span class=\"token variable\">$testResultsFolder</span> not found.\"</span>\n   <span class=\"token punctuation\">}</span>\n\n   dotnet test <span class=\"token variable\">$testProjectPath</span> <span class=\"token operator\">--</span>settings:<span class=\"token variable\">$testSettingsPath</span> \n   <span class=\"token variable\">$recentCoverageFile</span> = <span class=\"token function\">Get-ChildItem</span> <span class=\"token operator\">-</span>File <span class=\"token operator\">-</span><span class=\"token keyword\">Filter</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>coverage <span class=\"token operator\">-</span>Path <span class=\"token variable\">$testResultsFolder</span> <span class=\"token operator\">-</span>Name <span class=\"token operator\">-</span>Recurse <span class=\"token punctuation\">|</span> <span class=\"token function\">Select-Object</span> <span class=\"token operator\">-</span>First 1<span class=\"token punctuation\">;</span>\n   <span class=\"token function\">write-host</span> <span class=\"token string\">'Test Completed'</span>  <span class=\"token operator\">-</span>ForegroundColor Green\n\n   C:\\Users\\krishnamohan\\<span class=\"token punctuation\">.</span>nuget\\packages\\microsoft<span class=\"token punctuation\">.</span>codecoverage\\15<span class=\"token punctuation\">.</span>9<span class=\"token punctuation\">.</span>0\\build\\netstandard1<span class=\"token punctuation\">.</span>0\\CodeCoverage\\CodeCoverage<span class=\"token punctuation\">.</span>exe analyze  <span class=\"token operator\">/</span>output:<span class=\"token variable\">$testResultsFolder</span>\\MyTestOutput<span class=\"token punctuation\">.</span>coveragexml  <span class=\"token variable\">$testResultsFolder</span><span class=\"token string\">'\\'</span><span class=\"token variable\">$recentCoverageFile</span>\n   <span class=\"token function\">write-host</span> <span class=\"token string\">'CoverageXML Generated'</span>  <span class=\"token operator\">-</span>ForegroundColor Green\n\n   dotnet C:\\Users\\krishnamohan\\<span class=\"token punctuation\">.</span>nuget\\packages\\reportgenerator\\4<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">.</span>10\\tools\\netcoreapp2<span class=\"token punctuation\">.</span>1\\ReportGenerator<span class=\"token punctuation\">.</span>dll <span class=\"token string\">\"-reports:<span class=\"token variable\">$testResultsFolder</span>\\MyTestOutput.coveragexml\"</span> <span class=\"token string\">\"-targetdir:<span class=\"token variable\">$testResultsFolder</span>\\coveragereport\"</span>\n   <span class=\"token function\">write-host</span> <span class=\"token string\">'CoverageReport Published'</span>  <span class=\"token operator\">-</span>ForegroundColor Green\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token function\">write-host</span> <span class=\"token string\">\"Caught an exception:\"</span> <span class=\"token operator\">-</span>ForegroundColor Red\n   <span class=\"token function\">write-host</span> <span class=\"token string\">\"Exception Type: <span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>Exception<span class=\"token punctuation\">.</span>GetType<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>.FullName)\"</span> <span class=\"token operator\">-</span>ForegroundColor Red\n   <span class=\"token function\">write-host</span> <span class=\"token string\">\"Exception Message: <span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>Exception<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span></span>\"</span> <span class=\"token operator\">-</span>ForegroundColor Red\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Conclusion</h2>\n<p>It took some time for me to figure it out as lot of information regarding this was scattered all over the internet. Finally it was worth the effort and coverage reports really improve quality of unit tests and helps developer to write better unit tests. Hope this blog post will be helpful for dotnet developers treading the same path.</p>\n"},"__N_SSG":true}