{"pageProps":{"id":"messaging-between-sw-and-angular-component","meta":{"title":"Messaging between Service Worker and Angular component","description":"Most of the time service worker logic and application logic work in isolation, but there will be cases where we need to do pass messages between them. In this post we’ll see how we can do this in an angular application.","published":true,"publishedAt":"2021-05-23T00:00:00.000Z","updatedAt":"2021-05-31T00:00:00.000Z","category":"tech","image":"banners/32","keywords":["Service Worker","PWA","Angular"],"authors":["Krishna Mohan A M"]},"content":"<p>Most of the time service worker logic and application logic work in isolation, but there will be cases where we need to pass messages between them. For example we are using background sync and to let the application know that it is complete, we can send a message from service worker and receive it in the application. In this post we’ll see how we can do this in an angular application.</p>\n<h2>Prerequisite</h2>\n<ol>\n<li>Basic understanding of Angular <a href=\"https://angular.io/guide/what-is-angular\">application architecture</a>.</li>\n<li>Basic understanding of <a href=\"https://angular.io/guide/service-worker-intro\">PWA</a> and service workers.</li>\n<li><a href=\"https://code.visualstudio.com/download\">VS Code</a> and <a href=\"https://angular.io/cli#installing-angular-cli\">@angular/cli</a> installation.</li>\n</ol>\n<h2>Basic Workflow</h2>\n<ul>\n<li>On button click we'll create a message with property <code>type</code> and value <code>FROM_APP</code> and send it to the service worker.</li>\n<li>In service worker we'll create a event handler to listen to messages and filter messages with type <code>FROM_APP</code>.</li>\n<li>From service worker send acknowledgement message back to client with property <code>type</code> and value <code>FROM_SW</code>.</li>\n<li>In the angular component receive the acknowledgement and print it to the console.</li>\n</ul>\n<h2>Send Message from Angular</h2>\n<p>To send message from angular we will be using <code>postMessage</code> method of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/message_event\">ServiceWorker</a>. <code>postMessage</code> signature is similar to that of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\">Client.postMessage</a>. Unfortunately I couldn't find its documentation in the MDN site.</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\">navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'FROM_APP'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>Create event handler to accept message from service worker.</h2>\n<p>Here we'll be adding the handler to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/message_event\">ServicWorkerContainer</a> <code>message</code> event.</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\">navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&#x26;&#x26;</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'FROM_SW'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message received from SW'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Receive message in service worker</h2>\n<p>In service worker we can create an event handler to the message event that will filter messages with type <code>FROM_APP</code>.</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\">self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&#x26;&#x26;</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'FROM_APP'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message received from app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>Send acknowledge to the parent page</h2>\n<p>To send acknowledge message we need to identify the last focused tab. We can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Clients/matchAll\">matchAll</a> method for that. This method (Chrome 46/Firefox 54 and later) returns clients in most recently focused order.</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\">self<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>clients<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clients <span class=\"token operator\">&#x26;&#x26;</span> clients<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Respond to last focused tab</span>\n        clients<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'FROM_SW'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>Conclusion</h2>\n<p>Even though service worker communication and its implementation are easy, it is very difficult to get relevant documentation regarding events and available methods. Referring Mozilla documentation is a good start, but it is not complete.  You can also refer '<a href=\"https://felixgerschau.com/how-to-communicate-with-service-workers/\">How to communicate with Service Workers</a>' article written by <a href=\"https://twitter.com/4xfelix\">Felix Gerschau</a> for more information.</p>\n"},"__N_SSG":true}