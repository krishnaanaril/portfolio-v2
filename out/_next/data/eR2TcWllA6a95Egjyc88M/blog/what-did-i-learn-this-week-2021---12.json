{"pageProps":{"id":"what-did-i-learn-this-week-2021---12","meta":{"title":"What did I learn this week (2021) - 12","description":"Weekly summarization and review of things I've learned in the third week of March 2021","published":true,"publishedAt":"2021-03-21T00:00:00.000Z","updatedAt":"2021-03-21T00:00:00.000Z","category":"learnings","image":"banners/21","keywords":["dotnet","finance","git"],"authors":["Krishna Mohan A M"]},"content":"<ol>\n<li>\n<p>Learned how to create a dotnet <a href=\"https://devblogs.microsoft.com/dotnet/net-interactive-preview-3-vs-code-insiders-and-polyglot-notebooks/\">notebook</a> in Visual Studio Code.</p>\n</li>\n<li>\n<p>Learned that VS Code insider is <a href=\"https://stackoverflow.com/questions/53944549/what-are-the-differences-between-visual-studio-code-and-visual-studio-code-insid\">same</a> as VS Code Beta version.</p>\n</li>\n<li>\n<p><a href=\"https://zerodha.com/varsity/chapter/the-ipo-markets-part-2/\">Draft Red herring prospectus</a> (DRHP) – If the company gets the initial SEBI nod, then the company needs to prepare the DRHP. A DRHP is a document that gets circulated to the public. Along with a lot of information, DRHP should contain the following details:</p>\n<ul>\n<li>The estimated size of the IPO</li>\n<li>The estimated number of shares being offered to the public</li>\n<li>Why the company wants to go public and how does the company plan to utilize the funds along with the timeline projection of fund utilization</li>\n<li>Business description including the revenue model, expenditure details</li>\n<li>Complete financial statements</li>\n<li>Management Discussion and Analysis – how the company perceives future business operations to emerge</li>\n<li>Risks involved in the business</li>\n<li>Management details and their background</li>\n</ul>\n</li>\n<li>\n<p><strong>How to re-do a reverted merge</strong></p>\n<ul>\n<li>Checkout a new branch from the master.</li>\n<li>Revert the reverted merge. To revert a merge you need to pass the <a href=\"https://stackoverflow.com/a/7100005/1520750\">parent number</a> along with the revert command.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> revert <span class=\"token parameter variable\">-m</span> <span class=\"token number\">2</span> 8989ee0 \n</code></pre></div>\n<ul>\n<li>Add your fixes</li>\n<li>Create a new pull request to the master.</li>\n</ul>\n</li>\n<li>\n<p>Windows 8+ uses a <a href=\"https://superuser.com/a/954149/930941\">hybrid boot system</a> and it do not shutdown the system completely when user shutdowns the computer. Due to this system uptime is calculated from the last time we restarted the machine which may not be equal to the current session time. One trick is to check the <a href=\"https://superuser.com/a/909172/930941\">event logs</a>. I also <a href=\"https://community.idera.com/database-tools/powershell/powertips/b/tips/posts/get-sleep-and-hibernation-times\">found a powershell script</a> to display the hibernate time from the event logs.</p>\n<div class=\"remark-highlight\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token keyword\">function</span> <span class=\"token function\">Get-HibernationTime</span>\n<span class=\"token punctuation\">{</span>    \n    <span class=\"token comment\"># get hibernation events</span>\n    <span class=\"token function\">Get-EventLog</span> <span class=\"token operator\">-</span>LogName system <span class=\"token operator\">-</span>InstanceId 1 <span class=\"token operator\">-</span>Source Microsoft-Windows-Power-TroubleShooter <span class=\"token punctuation\">|</span>\n    <span class=\"token function\">ForEach-Object</span> <span class=\"token punctuation\">{</span>    \n        <span class=\"token comment\"># create new object for results</span>\n        <span class=\"token variable\">$result</span> = <span class=\"token string\">'dummy'</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Select-Object</span> <span class=\"token operator\">-</span>Property ComputerName<span class=\"token punctuation\">,</span> SleepTime<span class=\"token punctuation\">,</span> WakeTime<span class=\"token punctuation\">,</span> Duration\n        \n        <span class=\"token comment\"># store details in new object, convert datatype where appropriate</span>\n        <span class=\"token namespace\">[DateTime]</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">.</span>Sleeptime = <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>ReplacementStrings<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>\n        <span class=\"token namespace\">[DateTime]</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">.</span>WakeTime = <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>ReplacementStrings<span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>\n        <span class=\"token variable\">$time</span> = <span class=\"token variable\">$result</span><span class=\"token punctuation\">.</span>WakeTime <span class=\"token operator\">-</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">.</span>SleepTime\n        <span class=\"token variable\">$result</span><span class=\"token punctuation\">.</span>Duration = <span class=\"token punctuation\">(</span><span class=\"token namespace\">[int]</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$time</span><span class=\"token punctuation\">.</span>TotalHours <span class=\"token operator\">*</span> 100<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>100\n        <span class=\"token variable\">$result</span><span class=\"token punctuation\">.</span>ComputerName = <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>MachineName\n        \n        <span class=\"token comment\"># return result</span>\n        <span class=\"token variable\">$result</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n</code></pre></div>\n</li>\n</ol>\n"},"__N_SSG":true}